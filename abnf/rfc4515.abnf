;
; taken from https://tools.ietf.org/search/rfc4515#section-3
; some parts have been modified to accomodate the parser (comments inline)
; mostly because ABNF does not really specify a priority in alternations
; see https://stackoverflow.com/questions/37412366/is-the-alternative-operator-in-abnf-commutative/54951921#54951921
;
filter         = LPAREN filtercomp RPAREN
filtercomp     = andoperator / oroperator / notoperator / item
andoperator    = AMPERSAND filterlist
oroperator     = VERTBAR filterlist
notoperator    = EXCLAMATION filter
filterlist     = 1*filter
; item           = simple / present / substring / extensible
item           = present / substring / extensible / simple
simple         = attr filtertype assertionvalue
filtertype     = equal / approx / greaterorequal / lessorequal
equal          = EQUALS
approx         = TILDE EQUALS
greaterorequal = RANGLE EQUALS
lessorequal    = LANGLE EQUALS
extensible     = ( attr [dnattrs]
                      [matchingrule] COLON EQUALS assertionvalue )
                  / ( [dnattrs]
                      matchingrule COLON EQUALS assertionvalue )
present        = attr EQUALS ASTERISK
substring      = attr EQUALS [initial] any [final]
initial        = assertionvalue
any            = ASTERISK *(assertionvalue ASTERISK)
final          = assertionvalue
attr           = attributedescription
                    ; The attributedescription rule is defined in
                    ; Section 2.5 of [RFC4512].
; dnattrs        = COLON "dn" ; due to parser
dnattrs        = ":dn"
matchingrule   = COLON oid
assertionvalue = valueencoding
; The <valueencoding> rule is used to encode an <AssertionValue>
; from Section 4.1.6 of [RFC4511].
valueencoding  = 0*(normal / escaped)
normal         = UTF1SUBSET / UTFMB
escaped        = ESC HEX HEX
UTF1SUBSET     = %x01-27 / %x2B-5B / %x5D-7F
                    ; UTF1SUBSET excludes 0x00 (NUL), LPAREN,
                    ; RPAREN, ASTERISK, and ESC.
EXCLAMATION    = %x21 ; exclamation mark ("!")
AMPERSAND      = %x26 ; ampersand (or AND symbol) ("&")
ASTERISK       = %x2A ; asterisk ("*")
COLON          = %x3A ; colon (":")
VERTBAR        = %x7C ; vertical bar (or pipe) ("|")
TILDE          = %x7E ; tilde ("~")

; from https://tools.ietf.org/search/rfc4512#section-2.5
attributedescription = attributetype options
attributetype = oid
options = *( SEMI option )
option = 1*keychar

; common grammar from https://tools.ietf.org/search/rfc4512#section-1.4
; some of this are already in core ABNF but still adding here for completeness
; since rfc4512 specifies them
keystring = leadkeychar *keychar
leadkeychar = ALPHA
keychar = ALPHA / DIGIT / HYPHEN
; number  = DIGIT / ( LDIGIT 1*DIGIT )
number  = ( LDIGIT 1*DIGIT ) / DIGIT ; swapped due to parser

ALPHA   = %x41-5A / %x61-7A   ; "A"-"Z" / "a"-"z"
DIGIT   = %x30 / LDIGIT       ; "0"-"9"
LDIGIT  = %x31-39             ; "1"-"9"
HEX     = DIGIT / %x41-46 / %x61-66 ; "0"-"9" / "A"-"F" / "a"-"f"

SP      = 1*SPACE  ; one or more " "
WSP     = 0*SPACE  ; zero or more " "
NULL    = %x00 ; null (0)
SPACE   = %x20 ; space (" ")
DQUOTE  = %x22 ; quote (""")
SHARP   = %x23 ; octothorpe (or sharp sign) ("#")
DOLLAR  = %x24 ; dollar sign ("$")
SQUOTE  = %x27 ; single quote ("'")
LPAREN  = %x28 ; left paren ("(")
RPAREN  = %x29 ; right paren (")")
PLUS    = %x2B ; plus sign ("+")
COMMA   = %x2C ; comma (",")
HYPHEN  = %x2D ; hyphen ("-")
DOT     = %x2E ; period (".")
SEMI    = %x3B ; semicolon (";")
LANGLE  = %x3C ; left angle bracket ("<")
EQUALS  = %x3D ; equals sign ("=")
RANGLE  = %x3E ; right angle bracket (">")
ESC     = %x5C ; backslash ("\")
USCORE  = %x5F ; underscore ("_")
LCURLY  = %x7B ; left curly brace "{"
RCURLY  = %x7D ; right curly brace "}"

; Any UTF-8 [RFC3629] encoded Unicode [Unicode] character
UTF8    = UTF1 / UTFMB
UTFMB   = UTF2 / UTF3 / UTF4
UTF0    = %x80-BF
UTF1    = %x00-7F
UTF2    = %xC2-DF UTF0
UTF3    = %xE0 %xA0-BF UTF0 / %xE1-EC 2(UTF0) /
          %xED %x80-9F UTF0 / %xEE-EF 2(UTF0)
UTF4    = %xF0 %x90-BF 2(UTF0) / %xF1-F3 3(UTF0) /
          %xF4 %x80-8F 2(UTF0)

OCTET   = %x00-FF ; Any octet (8-bit data unit)

numericoid = number 1*( DOT number )

descr = keystring

oid = descr / numericoid
